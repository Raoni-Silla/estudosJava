Essas anotações vem de estudo proprio e das videos aulas do canal curso em video e devdojo maratona java

Como Programas se Tornam Executáveis: C vs. Java
C e a Compilação Específica por Plataforma
Para que um computador entenda um código fonte em C, ele precisa de um programa especial: o compilador. O compilador pega o código fonte e o transforma diretamente em um código executável, que contém as instruções de máquina específicas para a arquitetura do processador e o sistema operacional.

A característica principal de C é que o código executável é dependente da plataforma. Isso significa que, para um programa em C rodar em diferentes sistemas operacionais (como Windows, Linux, macOS), ele precisa ser pré-compilado por um compilador específico para cada um desses ambientes.

Java e o Conceito "Write Once, Run Anywhere" (WORA)
Java adota uma abordagem diferente para a execução de programas, focando na portabilidade:

Código Fonte Java (.java): O programador escreve o código em Java.
Compilação para Bytecode: O compilador Java (javac) converte o código fonte em um formato intermediário chamado bytecode (.class). Este bytecode não é um executável de máquina, mas sim um conjunto de instruções para a Máquina Virtual Java (JVM).
Execução pela JVM: O bytecode não é diretamente entendido pelo computador. Ele precisa de um software intermediário: a Java Virtual Machine (JVM). A JVM interpreta o bytecode e o traduz para o código de máquina específico do sistema operacional onde está rodando.
A grande vantagem do Java é o conceito WORA (Write Once, Run Anywhere). Como o bytecode é neutro em relação à plataforma, ele pode ser gerado em um sistema (ex: Windows) e executado em qualquer outro (macOS, Linux, Android, IoT) que possua uma JVM compatível.

Componentes Essenciais do Ecossistema Java
JRE (Java Runtime Environment)
O JRE (Java Runtime Environment) é o ambiente de execução Java. Ele é destinado a usuários que querem apenas executar programas Java. O JRE inclui a JVM e as bibliotecas essenciais necessárias para a execução.

Estrutura do JRE:

JVM (Java Virtual Machine): Responsável por interpretar o bytecode.
Class Loader: Carrega o bytecode na JVM.
Bytecode Verifier: Verifica a segurança e a correção do bytecode antes da execução.
Interpreter/Garbage Collector: O interpretador traduz o bytecode linha por linha para o código de máquina do sistema operacional. O Garbage Collector gerencia a memória da JVM.
JIT (Just-In-Time) Compiler: Otimiza a execução. Identifica partes do código frequentemente usadas (hotspots) e as compila "em tempo real" para código de máquina nativo, armazenando em cache para futuras execuções e melhorando a performance.
Bibliotecas (Java APIs): Conjunto de classes e interfaces pré-escritas que fornecem funcionalidades para o desenvolvimento e execução de aplicações Java.
JDK (Java Development Kit)
O JDK (Java Development Kit) é o kit de desenvolvimento Java. Ele é voltado para desenvolvedores que criam programas em Java. O JDK é mais completo, pois inclui o JRE e adiciona ferramentas essenciais para a programação.

Estrutura do JDK:

JRE: (conforme descrito acima)
Linguagem Java (Java Language): Inclui o compilador javac e outras ferramentas essenciais.
Ferramentas de Desenvolvimento (Java Tools):
javac (Compilador Java): Converte código fonte Java em bytecode.
Debugger: Ajuda a encontrar e corrigir erros no código.
APIs de Desenvolvimento: Bibliotecas adicionais para diversas finalidades de programação.
IDE (Integrated Development Environment)
Uma IDE (Integrated Development Environment) é um ambiente de desenvolvimento integrado. Ela é um software que combina diversas ferramentas essenciais para o desenvolvimento de software em uma única interface, como editor de código, compilador (ou integração com o compilador), debugger e outras ferramentas de automação, facilitando e agilizando o processo de programação.

então o app roda na jvm e a jvm roda em cima do so, cada so tem sua jvm
porém a sua aplicação é feita direto pro jvm, vai ser um app1.java(arquivo incial) e depois vai pro executavel que é o app.class(bytecode)
ai sim o arquivo.class é mandando pra jvm
linguagens de programação de alto nivel é quando a linguagem é de facil entendimento dos humanos
e as de baixo nivel são mais complexas e mais perto da maquina So, tipo o assembly, nao dando pra entender
facilmente oque ta rolando no arquivo
o java é atualizado a cada 6 meses

versões LTS, tem suporte a longo prazo, são as melhores pra se usar
as empresas focam sempre nas versões LTS, são mais confiaveis

classes seguem o padrão camel case, primeira letra maiscula sempre quando é class
palavras reservadas em java, ficam coloridas, não podendo usar para identificar variaveis
pacotes no java ajudam a orgazinar melhor o codigo, a pasta out aparece quando se compila o projeto seria
o bytecode
pra organizar nosso codigo, sendo o java bem orientado a pacotes
sendo que um projeto pode ter pelo menos umas 200 classes, pacotes ajudam a organizar
e agrupar classes com coisas em comum

url do website invertida + nome do projeto ai começa a divisão

todas as classes dentro de pacotes devem começar com a linha de codigo sendo o pacote
o nome da classe
quando se cria uma classe dentro de um packote o packge tem que ser a primeira linha
java doc é a melhor forma de se comentar um codigo, de acordo com o livro clean code
ele diz pra evitar comentarios, pois se esta escrevendo comentarios isso diz que o codigo
não esta claro o suficiente q eu devo reescrever
Pelo que entendi, você gostaria de adicionar mais detalhes sobre bits e bytes às suas anotações, incluindo a definição de cada um e outras unidades de medida.

Bits e Bytes: Os Blocos Construtores da Informação Digital
Bit (Binary Digit):

É a menor unidade de informação em um computador.
Representa um valor binário: 0 (desligado/falso) ou 1 (ligado/verdadeiro).
Pense nele como um interruptor de luz: ou está ligado ou está desligado.
Byte:
1 byte é igual a 8 bits, bits são 8 0 e 1 reunidos
É um grupo de 8 bits.
É a unidade fundamental para medir o tamanho de arquivos e a capacidade de armazenamento.
Um byte pode representar 256 valores diferentes (2^8).
Exemplos: uma letra, um número ou um símbolo geralmente ocupam 1 byte de espaço.
Tipos de Dados e Seus Tamanhos (em Bytes e Bits):
byte: 1 byte (8 bits)
short: 2 bytes (16 bits)
int: 4 bytes (32 bits)
long: 8 bytes (64 bits)
float: 4 bytes (32 bits)
double: 8 bytes (64 bits)
boolean: 1 bit (embora muitas linguagens de programação o armazenem como 1 byte para alinhamento de memória, para otimização de acesso à memória)
char: 2 bytes (16 bits) - geralmente usado para caracteres Unicode, que suportam uma gama muito maior de símbolos e idiomas.
Outras Unidades de Medida:
Kilobyte (KB): 1 KB = 1024 bytes
Megabyte (MB): 1 MB = 1024 KB
Gigabyte (GB): 1 GB = 1024 MB
Terabyte (TB): 1 TB = 1024 GB
Essas unidades são usadas para medir o tamanho de arquivos, a capacidade de discos rígidos, memória RAM e outros dispositivos de armazenamento.
tipos primitivos possuem tamanhos e esses tamanhos tem que ser de acordo com oque voce quer guardar la

quando voce escreve o valor no codigo, quando ele é inteiro, o java por padrao vai entender esses numeros por inteiros
quando se coloca por exemplo 250.0 pra double da certo, pra float nao, precisando especificar
float salario = 250.0F;
double salarioSal = 250.0D;
int idade = 10;
long idade1 = 10L;

cast é quando voce força um valor de uma variavel dentro da outra
voce pode forçar atraves do parenteses

int idade = (int) 100000000000L; -> isso força o java a guardar uma variavel x dentro de outra y pra fazer caber na força
mesmo se for maior, ele corta bit até entrar
